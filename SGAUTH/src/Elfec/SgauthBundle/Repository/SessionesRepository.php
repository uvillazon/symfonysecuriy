<?php

namespace Elfec\SgauthBundle\Repository;

use Elfec\SgauthBundle\Entity\aplicaciones;
use Elfec\SgauthBundle\Entity\Repository\BaseRepository;
use Elfec\SgauthBundle\Entity\Sessiones;
use Elfec\SgauthBundle\Model\RespuestaSP;
use Firebase\JWT\JWT;

/**
 * SessionesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SessionesRepository extends BaseRepository
{

    protected $secret = "developmentSessionSecret";

    public function crearSession($sessionId)
    {
        try {
            $session = new Sessiones();
            $session->setSessionId($sessionId);
            $session->setFechaReg(new \DateTime());
            $this->_em->persist($session);
            $this->_em->flush();
            return new RespuestaSP(true, "proceso ejecutado correctamente", $session);

        } catch (\Exception $e) {
            return new RespuestaSP(false, $e->getMessage());
        }
    }

    public function actualizarSession($sessionId, $array)
    {
        try {
            if (!array_key_exists("token", $array)) {
                return new RespuestaSP(false, "No existe token valido. por favor coordinar con TI para solucionar el problema", null, null, 400, $sessionId);
            }
            if (!array_key_exists("codigoApp", $array)) {
                return new RespuestaSP(false, "No existe codigoApp valido. por favor coordinar con TI para solucionar el problema", null, null, 400, $sessionId);
            }

            /**
             * @var Sessiones $session
             * @var aplicaciones $app
             */

            $app = $this->_em->getRepository("ElfecSgauthBundle:aplicaciones")->findOneBy(array("codigo" => $array["codigoApp"]));
            if (empty($app)) {
                return new RespuestaSP(false, "El codigoApp no existe en el sistema de autenticacion. por favor consulta con TI", null, null, 400, $sessionId);
            }
            $token = $array["token"];
            $session = $this->findOneBy(array("sessionId" => $sessionId));

            $decoded = JWT::decode(str_replace('"', '', $token), $app->getSecretKey(), array('HS256'));
            $session->setPerfilId($decoded->usuario->id_perfil);
            $session->setUsuarioId($decoded->usuario->id_usuario);
            $session->setAplicId($decoded->usuario->id_aplic);
            $this->_em->persist($session);
            $this->_em->flush();
            $sessiones = $this->findBy(array("aplicId" => $decoded->usuario->id_aplic, "usuarioId" => $decoded->usuario->id_usuario));
            if (count($sessiones) > $app->getCantSesionesPermitidas()) {
                $this->_em->remove($session);
                $this->_em->flush();

                return new RespuestaSP(false, "Ha excedido la cantidad de sesiones permitida. Consulte con T.I. para la ampliaciÃ³n", null, null, 400, $sessionId);
            }
            return new RespuestaSP(true, "proceso ejecutado correctamente", $session, null, 200, $sessionId);

        } catch (\Exception $e) {
            $this->_em->remove($session);
            $this->_em->flush();
            return new RespuestaSP(false, $e->getMessage(), null, null, 400, $sessionId);
        }
    }

    public function eliminarSession($sessionId)
    {
        try {
            /**
             * @var Sessiones $session
             */


            $session = $this->findOneBy(array("sessionId" => $sessionId));

            if (!is_null($session)) {
                $this->_em->remove($session);
                $this->_em->flush();
            }
            return new RespuestaSP(true, "proceso ejecutado correctamente", $session);

        } catch (\Exception $e) {
            return new RespuestaSP(false, $e->getMessage());
        }
    }
}

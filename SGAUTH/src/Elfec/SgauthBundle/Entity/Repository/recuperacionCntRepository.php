<?php

namespace Elfec\SgauthBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Elfec\SgauthBundle\Entity\Repository\BaseRepository;

/**
 * recuperacionCntRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class recuperacionCntRepository extends BaseRepository
{
    public function guardarRecuperacionCnt($data)
    {

        $result = new \Elfec\SgauthBundle\Model\RespuestaSP();
        try {
            $conection = $this->_em->getConnection();
            $st = $conection->prepare("SELECT elfec.guardar_recuperacioncnt (
  :p_id_aplic::numeric,
  :p_usuario::varchar,
  :p_ip_solic::varchar,
  :p_cliente_solic::varchar);");
            $st->bindValue(":p_id_aplic", array_key_exists('id_aplic', $data) ? $data["id_aplic"] : 0);
            $st->bindValue(":p_usuario", array_key_exists('usuario', $data) ? $data["usuario"] : null);
            $st->bindValue(":p_ip_solic", array_key_exists('ip_solic', $data) ? $data["ip_solic"] : 0);
            $st->bindValue(":p_cliente_solic", array_key_exists('cliente_solic', $data) ? $data["cliente_solic"] : 0);
            $st->execute();
            $response = $st->fetchAll();
            if (count($response) > 0) {
                if (is_numeric($response[0]["guardar_recuperacioncnt"])) {
                    $result->success = true;
                    $result->msg = "Proceso Ejectuado Correctamente";
                    $result->id = $response[0]["guardar_recuperacioncnt"];
                } else {
                    $result->success = false;
                    $result->msg = $response[0]["guardar_recuperacioncnt"];
                }
            } else {
                $result->success = false;
                $result->msg = "Ocurrio algun problema al Ejectuar la Funcion en Postgresql";
            }
        } catch (\Exception $e) {
            $result->success = false;
            $result->msg = $e->getMessage();
        }
        return $result;
    }

    public function cambiar_password($data)
    {

        $result = new \Elfec\SgauthBundle\Model\RespuestaSP();
        try {
            $conection = $this->_em->getConnection();
            $st = $conection->prepare("SELECT public.cambiar_password (
  :p_codigo::varchar,
  :p_usuario::varchar,
  :p_password::varchar);");
            $st->bindValue(":p_codigo", array_key_exists('codigo', $data) ? $data["codigo"] : 0);
            $st->bindValue(":p_usuario", array_key_exists('usuario', $data) ? $data["usuario"] : null);
            $st->bindValue(":p_password", array_key_exists('password', $data) ? $data["password"] : null);
//            var_dump($st);die();
            $st->execute();
            $response = $st->fetchAll();
//            var_dump($data);
            if (count($response) > 0) {
                if (is_numeric($response[0]["cambiar_password"])) {
                    $result->success = true;
                    $result->msg = "Proceso de cambio de contraseÃ±a correctamente";
                    $result->id = $response[0]["cambiar_password"];
                } else {
                    $result->success = false;
                    $result->msg = $response[0]["cambiar_password"];
                }
            } else {
                $result->success = false;
                $result->msg = "Ocurrio algun problema al Ejectuar la Funcion en Postgresql";
            }
        } catch (\Exception $e) {
            $result->success = false;
            $result->msg = $e->getMessage();
        }
        return $result;
    }

    public function cambiar_password_sc($data)
    {

        $result = new \Elfec\SgauthBundle\Model\RespuestaSP();
        try {
            $conection = $this->_em->getConnection();
            $st = $conection->prepare("SELECT public.cambiar_password (
  :p_usuario::varchar,
  :p_password::varchar);");
            $st->bindValue(":p_usuario", array_key_exists('usuario', $data) ? $data["usuario"] : null);
            $st->bindValue(":p_password", array_key_exists('password', $data) ? $data["password"] : null);
            $st->execute();
            $response = $st->fetchAll();
            if (count($response) > 0) {
                if (is_numeric($response[0]["cambiar_password"])) {
                    $result->success = true;
                    $result->msg = "Proceso de cambio de contraseÃ±a correctamente";
                    $result->id = $response[0]["cambiar_password"];
                } else {
                    $result->success = false;
                    $result->msg = $response[0]["cambiar_password"];
                }
            } else {
                $result->success = false;
                $result->msg = "Ocurrio algun problema al Ejectuar la Funcion en Postgresql";
            }
        } catch (\Exception $e) {
            $result->success = false;
            $result->msg = $e->getMessage();
        }
        return $result;
    }

    public function verificarCambioPassword($data)
    {
        $result = new \Elfec\SgauthBundle\Model\RespuestaSP(false);
        $repoUsuario = $this->_em->getRepository("ElfecSgauthBundle:usuarios");

        try {
            $usuario = array_key_exists('usuario', $data) ? $data["usuario"] : null;
            $nuevo_password = array_key_exists('new_password', $data) ? $data["new_password"] : null;
            $password = array_key_exists('password', $data) ? $data["password"] : null;
            $repassword = array_key_exists('re_password', $data) ? $data["re_password"] : null;
            if($nuevo_password != $repassword){
                $result->msg = "Las contraseÃ±as no son iguales";
                return $result;
            }
            

        } catch (\Exception $e) {
            $result->msg = $e->getMessage();
            $result->success = false;
        }
        return $result;
    }

    public function cambiarPasswordPorAplicacion($data)
    {
        $result = new \Elfec\SgauthBundle\Model\RespuestaSP();
        try {


        } catch (\Exception $e) {
            $result->success = false;
            $result->msg = $e->getMessage();
        }
        return $result;
    }
}

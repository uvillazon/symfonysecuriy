<?php

namespace Elfec\SgauthBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Elfec\SgauthBundle\Entity\Repository\BaseRepository;

/**
 * listasRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class listasRepository extends BaseRepository
{

    /**
     * @param $data
     * @param $login
     * @return \Elfec\SgauthBundle\Model\RespuestaSP
     */
    public function grabarListas($data, $login)
    {
        $result = new \Elfec\SgauthBundle\Model\RespuestaSP();
        try {
            $conection = $this->_em->getConnection();
            $st = $conection->prepare("SELECT  elfec.grabar_listas (
            :p_id_lista::integer,
            :p_lista::varchar,
            :p_descripcion::varchar,
            :p_tam_limite::smallint,
            :p_tipo_valor::varchar,
            :p_mayus_minus::varchar,
            :p_estado::char,
            :p_id_aplic::numeric,
            :p_ordenar_por::varchar,
            :p_tipo_orden::varchar,
            :p_login_usr::VARCHAR);");
            $st->bindValue("p_id_lista", $this->getValueArray($data, "id_lista", 0));
            $st->bindValue("p_lista", $this->getValueArray($data, "lista", null));
            $st->bindValue("p_descripcion", $this->getValueArray($data, "descripcion", null));
            $st->bindValue("p_tam_limite", $this->getValueArray($data, "tam_limite", 0));
            $st->bindValue("p_tipo_valor", $this->getValueArray($data, "tipo_valor", null));
            $st->bindValue("p_mayus_minus", $this->getValueArray($data, "mayus_minus", null));
            $st->bindValue("p_id_aplic", $this->getValueArray($data, "id_aplic", 0));
            $st->bindValue("p_ordenar_por", $this->getValueArray($data, "ordenar_por", null));
            $st->bindValue("p_tipo_orden", $this->getValueArray($data, "tipo_orden", null));
            $st->bindValue("p_estado", $this->getValueArray($data, "estado", 0));
            $st->bindValue(":p_login_usr", $login);
            $st->execute();
            $response = $st->fetchAll();
            $result = $this->respuestaSP($response);
        } catch (\Exception $e) {
            $result->success = false;
            $result->msg = $e->getMessage();
        }
        return $result;

    }

    public function eliminarLista($id_lista, $login)
    {
//        var_dump($id_lista);
        $result = new \Elfec\SgauthBundle\Model\RespuestaSP();
        try {
            /**
             * @var \Elfec\SgauthBundle\Entity\listas $lista
             */
            $lista = $this->find($id_lista);
            if (!is_null($lista)) {
                if(count($lista->getListaItems())> 0 ){
                    $result->success = false;
                    $result->msg = "Existen Varios Items Asociados al Tipo de Lista . Eliminar los Items antes de eliminar";

                }
                else{
                    $this->_em->remove($lista);
                    $this->_em->flush();
                    $result->success = true;
                    $result->msg = "Proceso ejecutado Correctamente";
                }

            } else {
                $result->success = false;
                $result->msg = "No existe el dato para eliminar";
            }

        } catch (\Exception $e) {
            $result->success = false;
            $result->msg = $e->getMessage();
        }
        return $result;
    }
}
